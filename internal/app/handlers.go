package app

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	switch msg.Text {
	case "/start":
		b.sendWelcome(msg.Chat.ID)
	case "/tasks":
		b.sendTasks(msg.Chat.ID)
	default:
		reply := tgbotapi.NewMessage(msg.Chat.ID,
			"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π.")
		b.tgBot.Send(reply)
	}
}

func (b *Bot) sendWelcome(chatID int64) {
	msg := tgbotapi.NewMessage(chatID,
		"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏–π.\n"+
			"–ö–æ–º–∞–Ω–¥—ã:\n"+
			"/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"+
			"/tasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π")
	b.tgBot.Send(msg)
}

func (b *Bot) sendTasks(chatID int64) {
	tasks, err := b.db.GetTasks()
	if err != nil {
		b.tgBot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π"))
		return
	}
	if len(tasks) == 0 {
		b.tgBot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–¥–∞–Ω–∏–π –Ω–µ—Ç"))
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, t := range tasks {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(t.Description, fmt.Sprintf("complete_task_%d", t.ID)),
			))
	}
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.tgBot.Send(msg)
}

func (b *Bot) handleCallback(query *tgbotapi.CallbackQuery) {
	data := query.Data
	chatID := query.Message.Chat.ID
	userID := query.From.ID

	// –û—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ‚Äú‚Ä¶‚Äù –≤ –∫–ª–∏–µ–Ω—Ç–µ
	if _, err := b.tgBot.Request(tgbotapi.NewCallback(query.ID, "")); err != nil {
		log.Println("Callback answer failed:", err)
	}

	switch {
	case strings.HasPrefix(data, "complete_task_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(data, "complete_task_"))
		if err := b.db.MarkTaskCompleted(int64(userID), id); err != nil {
			b.tgBot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"))
			return
		}
		b.tgBot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:"))
		b.sendGifts(chatID)

	case strings.HasPrefix(data, "select_gift_"):
		id, _ := strconv.Atoi(strings.TrimPrefix(data, "select_gift_"))
		if err := b.db.AssignGiftToUser(int64(userID), id); err != nil {
			b.tgBot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"))
			return
		}
		b.tgBot.Send(tgbotapi.NewMessage(chatID, "–ü–æ–¥–∞—Ä–æ–∫ –≤—ã–±—Ä–∞–Ω! –°–ø–∞—Å–∏–±–æ üòä"))

	default:
		log.Printf("Unknown callback data: %q", data)
	}
}

func (b *Bot) sendGifts(chatID int64) {
	gifts, err := b.db.GetGifts()
	if err != nil {
		b.tgBot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"))
		return
	}

	msg := tgbotapi.NewMessage(chatID, "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤:")
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, g := range gifts {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(g.Name, fmt.Sprintf("select_gift_%d", g.ID)),
			))
	}
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.tgBot.Send(msg)
}
